-- Tickets table
create table tickets (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  subject text not null,
  description text not null,
  status text not null default 'new',
  priority text not null default 'normal',
  category text not null,
  customer_id uuid references auth.users(id),
  assigned_to uuid references auth.users(id),
  constraint status_values check (status in ('new', 'open', 'pending', 'resolved', 'closed')),
  constraint priority_values check (priority in ('low', 'normal', 'high', 'urgent'))
);

-- Enable Row Level Security (RLS)
alter table tickets enable row level security;

-- Policies for tickets
create policy "Customers can create tickets"
  on tickets for insert
  to authenticated
  with check (auth.uid() = customer_id);

create policy "Customers can view their own tickets"
  on tickets for select
  to authenticated
  using (auth.uid() = customer_id);

create policy "Agents can view all tickets"
  on tickets for select
  to authenticated
  using (exists (
    select 1 from auth.users
    where auth.users.id = auth.uid()
    and auth.users.raw_user_meta_data->>'role' = 'agent'
  ));

create policy "Agents can update tickets"
  on tickets for update
  to authenticated
  using (exists (
    select 1 from auth.users
    where auth.users.id = auth.uid()
    and auth.users.raw_user_meta_data->>'role' = 'agent'
  )); 